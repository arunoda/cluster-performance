{
  "name": "meteor-down",
  "version": "2.1.3",
  "description": "Load testing for Meteor",
  "repository": {
    "type": "git",
    "url": "https://github.com/meteorhacks/mdown.git"
  },
  "main": "./lib/mdown.js",
  "scripts": {
    "test": "./node_modules/mocha/bin/mocha"
  },
  "bin": {
    "mdown": "./bin/mdown.js"
  },
  "author": {
    "name": "Meteorhacks"
  },
  "license": "MIT",
  "devDependencies": {
    "mocha": "1.21.x"
  },
  "dependencies": {
    "ddp": "0.10.x",
    "underscore": "1.7.x"
  },
  "readme": "MeteorDown\n==========\n\nMeteorDown is a load testing framework for Meteor server side components. It uses the DDP protocol to communicate with the Meteor application but provides much familiar interface for developers.\n\nInstallation\n------------\n\n    npm -g i meteor-down\n\nInstall MeteorDown globally to make the `mdown` command available. It's easier to run tests this way because you don't have to install the npm module everywhere. If you use the `mdown` command, it will also log useful performance statistics every 5 seconds.\n\nThe following mdown script will call an `example-method` with default options. Checkout the [writing tests](#writing-tests) section below and [examples](#examples) to learn how to write tests.\n\n~~~js\nmdown.init(function (Meteor) {\n  Meteor.call('example-method', function (error, result) {\n    Meteor.kill();\n  });\n});\n\nmdown.run();\n~~~\n\nClient API\n----------\n\nWriting tests is made similar to writing Meteor client side code. It's still limited to method calls and subscriptions but more features will be added soon. The function given to `mdown.init` will receive the ddp client as the first argument. This ddp client is based on [node-ddp-client](https://github.com/oortcloud/node-ddp-client) but with some changes to make it more Meteor like. This client will be already connected to the Meteor application (and authenticated if necessary options are given). Let's name the ddp client Meteor.\n\n###Meteor.call\n\n    Meteor.call ('name'[, args*], callback)\n\nCall a Meteor method. Just like the browser client, the callback will receive 2 arguments Error and the Result.\n\n###Meteor.subscribe\n\n    Meteor.subscribe ('name'[, args*], callback)\n\nThe callback function will be called when the subscription is ready and all initial data is loaded to the client.\n\n###Meteor.kill\n\n    Meteor.kill()\n\nDisconnect from the server. As soon as this is called, another client will connect to the server and run load test code.\n\n###Meteor.collections\n\n    var Collection = Meteor.collections['name']\n\nA dictionary of all client side collections. Data received from subscriptions will be available here.\n\nAuthentication\n--------------\n\nYou can use login using Meteor `login` method with valid crednentials or you can let MeteorDown handle it for you. Simply install the `meteorhacks:meteordown` smart package on your application and start it with `METEOR_DOWN_KEY` environment variable set to a random secret string.\n\n    meteor add meteorhacks:meteor-down\n    export METEOR_DOWN_KEY='YOUR_SUPER_SECRET_KEY'\n    meteor\n\nWhen running the test, give that random key and a list of userIds with options. When connecting each client, MeteorDown will randomly use available userIds and log into the application before running code given by user.\n\n~~~js\nmdown.run({\n  key: 'YOUR_SUPER_SECRET_KEY',\n  auth: {userId: ['JydhwL4cCRWvt3TiY', 'bg9MZZwFSf8EsFJM4']}\n})\n~~~\n\nThe smart package allows users to login with their userId and the MeteorDown key so make sure the key is never available to the public. Or install the smart package only when you're running a load test.\n\nOptions\n-------\n\nAll test options are optional therefor it's perfectly okay to call `mdown.run` without any arguments. All available arguments and their default values are given below.\n\n~~~js\nmdown.run({\n  concurrency: 10,\n  url: 'http://localhost:3000',\n  key: undefined,\n  auth: undefined\n});\n~~~\n\n###concurrency\n\nThe maximum number of clients connects to the application at any given time. The real number of concurrent connections can be lower than this number.\n\n###url\n\nMeteor application url.\n**NOTE: This should only have the domain and the port (example: localhost:3000). Meteor-down does not support routes at the moment.**\n\n###key\n\nThe secret key to use for MeteorDown authentication.\n\n###auth\n\nAuthentication information. Currently MeteorDown only supports login by userId.\n\nExamples\n--------\n\n### Calling a Method\n\n~~~js\n// Meteor Application\nMeteor.methods({\n  add: function (x, y) {return x + y }\n})\n~~~\n\n~~~js\n// MeteorDown Script\nmdown.init(function (Meteor) {\n  Meteor.call('add', 5, 6, function (err, res) {\n    console.log('5 + 6 is ' + res);\n    Meteor.kill();\n  });\n})\n~~~\n\n### Subscribing\n\n~~~js\n// Meteor Application\nItems = new Meteor.Collection('items');\nMeteor.publish({\n  allitems: function () { return Items.find() }\n})\n~~~\n\n~~~js\n// MeteorDown Script\nmdown.init(function (Meteor) {\n  Meteor.subscribe('allitems', function () {\n    console.log('Subscription is ready');\n    console.log(Meteor.collections.items);\n    Meteor.kill();\n  });\n})\n~~~\n",
  "readmeFilename": "README.md",
  "gitHead": "0e423c8bfd7c6b8e58497582c6f7aa8d174bbe2b",
  "bugs": {
    "url": "https://github.com/meteorhacks/mdown/issues"
  },
  "homepage": "https://github.com/meteorhacks/mdown",
  "_id": "meteor-down@2.1.3",
  "_shasum": "1be139524f93759b19a679bf894cc3dfc784f4e6",
  "_from": "meteor-down@*"
}
